#! /usr/bin/env python

def python26_args():
    import optparse
    from sshm._info import __version__, __long_description__
    p = optparse.OptionParser(version=__version__)
    p.add_option('servers')
    p.add_option('command')
    options, args = p.parse_args()

    command = ' '.join(args)
    return (options, command)


def python27_args():
    from sshm._info import __version__, __long_description__
    import argparse

    p = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
        description=__long_description__)
    p.add_argument('servers')
    p.add_argument('command', nargs='+')
    args = p.parse_args()
    command = ' '.join(args.command)
    return (args, command)



if __name__ == '__main__':
    try:
        from sshm import sshm, pad_output
    except ImportError:
        from sys import exit
        print('You must install sshm before you can use it! "python setup.py install"')
        exit(1)

    import select
    import sys
    try:
        args, command = python27_args()
    except ImportError:
        # Python2.6 doesn't have argparse
        args, command = python26_args()

    # Only provided stdin if there is data
    r_list, w_list, x_list = select.select([sys.stdin], [], [], 0)
    if r_list:
        stdin = r_list[0]
    else:
        stdin = None

    failure = False
    results = sshm(args.servers, command, stdin)
    for success, handle, message in results:
        if success:
            print('sshm: %s: %s' % (handle.uri, pad_output(message)))
        else:
            failure = True
            print('sshm: Failure:', handle.uri, pad_output(message))

    # Exit with non-zero when there is a failure
    if failure:
        sys.exit(1)

